# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ft_auth_pb2 as ft__auth__pb2


class authStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RequestAuthChallenge = channel.unary_unary(
        '/foxtrot.auth/RequestAuthChallenge',
        request_serializer=ft__auth__pb2.auth_request.SerializeToString,
        response_deserializer=ft__auth__pb2.auth_challenge.FromString,
        )
    self.RespondAuthChallenge = channel.unary_unary(
        '/foxtrot.auth/RespondAuthChallenge',
        request_serializer=ft__auth__pb2.auth_response.SerializeToString,
        response_deserializer=ft__auth__pb2.auth_confirm.FromString,
        )


class authServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RequestAuthChallenge(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RespondAuthChallenge(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_authServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RequestAuthChallenge': grpc.unary_unary_rpc_method_handler(
          servicer.RequestAuthChallenge,
          request_deserializer=ft__auth__pb2.auth_request.FromString,
          response_serializer=ft__auth__pb2.auth_challenge.SerializeToString,
      ),
      'RespondAuthChallenge': grpc.unary_unary_rpc_method_handler(
          servicer.RespondAuthChallenge,
          request_deserializer=ft__auth__pb2.auth_response.FromString,
          response_serializer=ft__auth__pb2.auth_confirm.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'foxtrot.auth', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
