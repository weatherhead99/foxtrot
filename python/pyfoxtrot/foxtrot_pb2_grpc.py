# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import foxtrot_pb2 as foxtrot__pb2
from . import ft_auth_pb2 as ft__auth__pb2


class exptserveStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InvokeCapability = channel.unary_unary(
        '/foxtrot.exptserve/InvokeCapability',
        request_serializer=foxtrot__pb2.capability_request.SerializeToString,
        response_deserializer=foxtrot__pb2.capability_response.FromString,
        )
    self.DescribeServer = channel.unary_unary(
        '/foxtrot.exptserve/DescribeServer',
        request_serializer=foxtrot__pb2.empty.SerializeToString,
        response_deserializer=foxtrot__pb2.servdescribe.FromString,
        )
    self.FetchData = channel.unary_stream(
        '/foxtrot.exptserve/FetchData',
        request_serializer=foxtrot__pb2.chunk_request.SerializeToString,
        response_deserializer=foxtrot__pb2.datachunk.FromString,
        )
    self.ServerCommand = channel.unary_unary(
        '/foxtrot.exptserve/ServerCommand',
        request_serializer=foxtrot__pb2.servercommand_request.SerializeToString,
        response_deserializer=foxtrot__pb2.serverrequest_return.FromString,
        )
    self.SetServerFlag = channel.unary_unary(
        '/foxtrot.exptserve/SetServerFlag',
        request_serializer=foxtrot__pb2.serverflag.SerializeToString,
        response_deserializer=foxtrot__pb2.serverflag.FromString,
        )
    self.GetServerFlag = channel.unary_unary(
        '/foxtrot.exptserve/GetServerFlag',
        request_serializer=foxtrot__pb2.serverflag.SerializeToString,
        response_deserializer=foxtrot__pb2.serverflag.FromString,
        )
    self.ListServerFlags = channel.unary_unary(
        '/foxtrot.exptserve/ListServerFlags',
        request_serializer=foxtrot__pb2.empty.SerializeToString,
        response_deserializer=foxtrot__pb2.serverflaglist.FromString,
        )
    self.DropServerFlag = channel.unary_unary(
        '/foxtrot.exptserve/DropServerFlag',
        request_serializer=foxtrot__pb2.serverflag.SerializeToString,
        response_deserializer=foxtrot__pb2.serverflag.FromString,
        )
    self.BroadcastNotification = channel.unary_unary(
        '/foxtrot.exptserve/BroadcastNotification',
        request_serializer=foxtrot__pb2.broadcast_notification.SerializeToString,
        response_deserializer=foxtrot__pb2.broadcast_notification.FromString,
        )
    self.RequestAuthChallenge = channel.unary_unary(
        '/foxtrot.exptserve/RequestAuthChallenge',
        request_serializer=ft__auth__pb2.auth_request.SerializeToString,
        response_deserializer=ft__auth__pb2.auth_challenge.FromString,
        )
    self.RespondAuthChallenge = channel.unary_unary(
        '/foxtrot.exptserve/RespondAuthChallenge',
        request_serializer=ft__auth__pb2.auth_response.SerializeToString,
        response_deserializer=ft__auth__pb2.auth_confirm.FromString,
        )


class exptserveServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def InvokeCapability(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DescribeServer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ServerCommand(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetServerFlag(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetServerFlag(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListServerFlags(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DropServerFlag(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BroadcastNotification(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RequestAuthChallenge(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RespondAuthChallenge(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_exptserveServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InvokeCapability': grpc.unary_unary_rpc_method_handler(
          servicer.InvokeCapability,
          request_deserializer=foxtrot__pb2.capability_request.FromString,
          response_serializer=foxtrot__pb2.capability_response.SerializeToString,
      ),
      'DescribeServer': grpc.unary_unary_rpc_method_handler(
          servicer.DescribeServer,
          request_deserializer=foxtrot__pb2.empty.FromString,
          response_serializer=foxtrot__pb2.servdescribe.SerializeToString,
      ),
      'FetchData': grpc.unary_stream_rpc_method_handler(
          servicer.FetchData,
          request_deserializer=foxtrot__pb2.chunk_request.FromString,
          response_serializer=foxtrot__pb2.datachunk.SerializeToString,
      ),
      'ServerCommand': grpc.unary_unary_rpc_method_handler(
          servicer.ServerCommand,
          request_deserializer=foxtrot__pb2.servercommand_request.FromString,
          response_serializer=foxtrot__pb2.serverrequest_return.SerializeToString,
      ),
      'SetServerFlag': grpc.unary_unary_rpc_method_handler(
          servicer.SetServerFlag,
          request_deserializer=foxtrot__pb2.serverflag.FromString,
          response_serializer=foxtrot__pb2.serverflag.SerializeToString,
      ),
      'GetServerFlag': grpc.unary_unary_rpc_method_handler(
          servicer.GetServerFlag,
          request_deserializer=foxtrot__pb2.serverflag.FromString,
          response_serializer=foxtrot__pb2.serverflag.SerializeToString,
      ),
      'ListServerFlags': grpc.unary_unary_rpc_method_handler(
          servicer.ListServerFlags,
          request_deserializer=foxtrot__pb2.empty.FromString,
          response_serializer=foxtrot__pb2.serverflaglist.SerializeToString,
      ),
      'DropServerFlag': grpc.unary_unary_rpc_method_handler(
          servicer.DropServerFlag,
          request_deserializer=foxtrot__pb2.serverflag.FromString,
          response_serializer=foxtrot__pb2.serverflag.SerializeToString,
      ),
      'BroadcastNotification': grpc.unary_unary_rpc_method_handler(
          servicer.BroadcastNotification,
          request_deserializer=foxtrot__pb2.broadcast_notification.FromString,
          response_serializer=foxtrot__pb2.broadcast_notification.SerializeToString,
      ),
      'RequestAuthChallenge': grpc.unary_unary_rpc_method_handler(
          servicer.RequestAuthChallenge,
          request_deserializer=ft__auth__pb2.auth_request.FromString,
          response_serializer=ft__auth__pb2.auth_challenge.SerializeToString,
      ),
      'RespondAuthChallenge': grpc.unary_unary_rpc_method_handler(
          servicer.RespondAuthChallenge,
          request_deserializer=ft__auth__pb2.auth_response.FromString,
          response_serializer=ft__auth__pb2.auth_confirm.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'foxtrot.exptserve', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
