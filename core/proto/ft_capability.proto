syntax = "proto3";
package foxtrot;
import "ft_types.proto";
import "ft_error.proto";
import "google/protobuf/timestamp.proto";

enum capability_types
{
    VALUE_READONLY = 0;
    VALUE_READWRITE = 1;
    ACTION = 2;
    STREAM = 3;
}


message devcapability
{
    capability_types tp = 1;
    string capname = 2;
    repeated string argnames = 3;
    repeated variant_descriptor argtypes = 4;
    //TODO: allow for return of vector types
    oneof return
    {
      variant_descriptor rettp = 5;
      byte_data_types vecrettp = 6;
      bool dynamic_rettp = 7;
    }
}



message capability_argument
{
    uint32 position = 1;
    ft_variant value = 2;
}

message capability_request
{
    uint32 msgid = 1;
    uint32 devid = 2;
    string capname  = 3;
    repeated capability_argument args = 4; 
    uint32 contention_timeout = 5;
}

message capability_response
{
    uint32 msgid = 1;
    uint32 devid = 2;
    string capname = 3;
    ft_variant returnval = 4;
    errstatus err = 5;
    google.protobuf.Timestamp tstamp = 6;
}

message chunk_request
{ 
    uint32 msgid = 1;
    uint32 devid = 2;
    string capname = 3;
    repeated capability_argument args = 4;
    uint32 chunksize = 6;
    uint32 contention_timeout = 7;

}

message datachunk
{
    bytes data = 1;
    uint32 msgid = 2;
    uint32 devid = 3;
    string capname = 4;
    errstatus err = 6;
    byte_data_types dtp = 7;

}


message devdescribe
{
    uint32 devid = 1;    
    string devtype = 2;
    string devcomment = 3;
    repeated devcapability caps = 4;
    
}

message servdescribe
{
    string servcomment = 1;
    map<uint32, devdescribe> devs_attached = 2;
    errstatus err = 3;
}

service capability
{
    rpc InvokeCapability (capability_request) returns (capability_response);
    rpc DescribeServer(empty) returns (servdescribe);
    rpc FetchData(chunk_request) returns (stream datachunk);

}

