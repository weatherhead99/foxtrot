syntax = "proto3";
package foxtrot;
option java_package = "io.foxtrot";

import "ft_error.proto";
import "ft_types.proto";
import "ft_auth.proto";
import "ft_streams.proto";
import "ft_capability.proto";

message empty {}


enum server_commands
{
    ReloadSetup = 0;
    ChangeDebugLevel = 1;
}


message devdescribe
{
    uint32 devid = 1;    
    string devtype = 2;
    string devcomment = 3;
    repeated devcapability caps = 4;
    
}

message servdescribe
{
    string servcomment = 1;
    map<uint32, devdescribe> devs_attached = 2;
    errstatus err = 3;
}


message telemetry
{
    string name = 1;
    uint64 tstamp = 2;
    oneof return {
        double dblret = 3;
        sint32 intret = 4;
        bool boolret = 5;
        string stringret = 6;
        }
        
    errstatus err = 7;
}

message chunk_request
{ 
    uint32 msgid = 1;
    uint32 devid = 2;
    string capname = 3;
    repeated capability_argument args = 4;
    uint32 chunksize = 6;
    uint32 contention_timeout = 7;

}

message datachunk
{
    bytes data = 1;
    uint32 msgid = 2;
    uint32 devid = 3;
    string capname = 4;
    errstatus err = 6;
    byte_data_types dtp = 7;

}

message servercommand_request
{
    server_commands command = 1;
    uint32 msgid = 2;
    repeated capability_argument args = 3;
    
}

message serverrequest_return
{
    errstatus err = 1;
    uint32 msgid = 2;
    capability_response ret = 3;
}


message serverflag
{
    errstatus err = 1;
    uint32 msgid = 2;
    string flagname = 3;
    
    oneof arg {
      double dblval = 4;
      sint32 intval = 5;
      bool boolval = 6;
      string stringval = 7;
    }
}

message serverflaglist
{
    errstatus err =1;
    uint32 msgid =2;
    
    repeated serverflag flags =3;

}


message broadcast_notification
{
    errstatus err = 1;
    uint32 msgid = 2;
    bool use_default_title = 3;
    string title = 4;
    string body = 5;
    bool use_default_channel = 6;
    string channel_target = 7;
}



service exptserve
{
    rpc InvokeCapability (capability_request) returns (capability_response);
    rpc DescribeServer(empty) returns (servdescribe);
    rpc FetchData(chunk_request) returns (stream datachunk);
    rpc ServerCommand (servercommand_request) returns (serverrequest_return);
    rpc SetServerFlag (serverflag) returns (serverflag);
    rpc GetServerFlag (serverflag) returns (serverflag);
    rpc ListServerFlags (empty) returns (serverflaglist);
    rpc DropServerFlag (serverflag) returns (serverflag);
    rpc BroadcastNotification (broadcast_notification) returns (broadcast_notification);
    rpc RequestAuthChallenge (auth_request) returns (auth_challenge);
    rpc RespondAuthChallenge (auth_response) returns (auth_confirm);
    rpc CreateStreamThread(stream_thread_request) returns (stream_thread_response);
    rpc ListStreamThread(empty) returns (streamthreadlist);
    rpc DestroyStreamThread(stream_thread_request) returns (stream_thread_response);
    rpc CreateStream(stream_registration_request) returns (stream_registration_response);
    rpc ListStreams(empty) returns (streamlist);
    rpc ReceiveStream(stream stream_control) returns (stream capability_response);
    rpc DestroyStream(stream_registration_request) returns (stream_registration_response);
}
